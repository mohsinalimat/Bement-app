//
//  MyStyleKit.swift
//  Bement
//
//  Created by Runkai Zhang on 8/23/19.
//  Copyright Â© 2019 Bement. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class MyStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let color: UIColor = UIColor(red: 0.203, green: 0.467, blue: 0.860, alpha: 1.000)
        static let shadow: NSShadow = NSShadow(color: UIColor.lightGray.withAlphaComponent(0.5), offset: CGSize(width: 0, height: -3), blurRadius: 4)
    }

    //// Colors

    @objc dynamic public class var color: UIColor { return Cache.color }

    //// Shadows

    @objc dynamic public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 222), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 222)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 240, resizedFrame.height / 222)


        //// Color Declarations
        let gradientColor = UIColor(red: 0.582, green: 0.582, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [MyStyleKit.color.cgColor, MyStyleKit.color.blended(withFraction: 0.5, of: gradientColor).cgColor, gradientColor.cgColor] as CFArray, locations: [0, 0.38, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.move(to: CGPoint(x: 0, y: 222))
        rectanglePath.addLine(to: CGPoint(x: 240, y: 222))
        rectanglePath.addLine(to: CGPoint(x: 240, y: 0))
        rectanglePath.addLine(to: CGPoint(x: 0, y: 0))
        rectanglePath.addLine(to: CGPoint(x: 0, y: 222))
        rectanglePath.close()
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 144.65, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 150.35, y: 115), controlPoint1: CGPoint(x: 144.65, y: 0), controlPoint2: CGPoint(x: 135.84, y: 82.15))
        bezierPath.addCurve(to: CGPoint(x: 240, y: 142), controlPoint1: CGPoint(x: 164.87, y: 147.85), controlPoint2: CGPoint(x: 240, y: 142))
        bezierPath.addLine(to: CGPoint(x: 240, y: 0))
        bezierPath.addLine(to: CGPoint(x: 144.65, y: 0))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 162.8, y: -8.85), end: CGPoint(x: 237.08, y: 143.43), options: [])
        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(MyStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}



private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
